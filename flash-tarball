#!/bin/sh
#
# Copyright (C) 2016 Dream Property GmbH
#

source librecovery

usage()
{
	echo "Usage: ${0} [-bhqrtv] <dreambox-image.tar.xz>"
	exit ${1}
}

BACKUP_SETTINGS=":"
RESTORE_SETTINGS=":"
SETTINGS="settings.tar.gz"

while getopts bhqrtv opt; do
	case "${opt}" in
		b)
			BACKUP_SETTINGS="backup-settings ${SETTINGS}"
			;;
		r)
			RESTORE_SETTINGS="restore-settings ${SETTINGS}"
			;;
	esac
	std_opt "${opt}"
done

shift $((${OPTIND} - 1))
[ "$#" -eq 1 ] || usage 1
FILENAME=`xrealpath ${1}`

assert_rescue_mode

is_writable_blockdev "${MMC_DEVICE}" || abort "Target block device '${MMC_DEVICE}' is not a writable block device"
! is_empty "${FILENAME}" || abort "No tarball filename given"
is_readable_file "${FILENAME}" || abort "Cannot access '${FILENAME}'"

create_workspace

mount_cache

[ ! -f "${RECOVERY_CACHE}/settings.tar.gz" ] || cp ${RECOVERY_CACHE}/settings.tar.gz ${SETTINGS}
if blkdev_has_filesystem "${ROOT_PARTITION}"; then
	${BACKUP_SETTINGS}
fi
[ "${RESTORE_SETTINGS}" = ":" -o -f "${SETTINGS}" ] || abort "Can't restore settings without prior backup!"

if ! is_blockdev "${ROOT_PARTITION}" || ! blkdev_has_filesystem "${DATA_PARTITION}"; then
	if is_beneath_directory "${FILENAME}" "${DATA_MOUNTPOINT}"; then
		xcp "${FILENAME}" .
		FILENAME=`basename "${FILENAME}"`
	fi
	unmount "${ROOT_MOUNTPOINT}" || abort "Failed to unmount root filesystem"
	unmount "${DATA_MOUNTPOINT}" || abort "Failed to unmount data filesystem"
	if ! is_blockdev "${ROOT_PARTITION}" || ! is_blockdev "${DATA_PARTITION}"; then
		create_partition_table "${MMC_DEVICE}" || abort "Failed to partition disk"
	fi
	if ! blkdev_has_filesystem "${DATA_PARTITION}"; then
		create_filesystem "${DATA_NAME}" "${DATA_PARTITION}" || warn "Failed to create ${FILESYSTEM} filesystem '${DATA_NAME}' on '${DATA_PARTITION}'"
	fi
	mount_cache
fi

unmount "${ROOT_MOUNTPOINT}" || abort "Failed to unmount root filesystem"
create_filesystem "${ROOT_NAME}" "${ROOT_PARTITION}" || abort "Failed to create ${FILESYSTEM} filesystem '${ROOT_NAME}' on '${ROOT_PARTITION}'"
safe_mount "${ROOT_PARTITION}" "${ROOT_MOUNTPOINT}" || abort "Failed to mount root filesystem"
extract_tarball "${FILENAME}" "${ROOT_MOUNTPOINT}" || abort "Failed to extract root filesystem"
run_postinsts "${ROOT_MOUNTPOINT}" dreambox-secondstage kernel-image || abort "Failed to run postinst scripts"
${RESTORE_SETTINGS}
unmount "${ROOT_MOUNTPOINT}" || warn "Failed to unmount root filesystem"

[ "${BACKUP_SETTINGS}" = ":" ] || update_cache "${SETTINGS}"
unmount_cache

info "Finished successfully. You may reboot now."
