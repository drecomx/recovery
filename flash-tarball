#!/bin/sh
#
# Copyright (C) 2016 Dream Property GmbH
#

source librecovery

usage()
{
	echo "Usage: ${0} [-bhqrtv] <dreambox-image.tar.xz>"
	exit ${1}
}

BACKUP_SETTINGS=":"
RESTORE_SETTINGS=":"
SETTINGS="settings.tar.gz"

while getopts bhqrtv opt; do
	case "${opt}" in
		b)
			BACKUP_SETTINGS="backup-settings ${SETTINGS}"
			;;
		r)
			RESTORE_SETTINGS="restore-settings ${SETTINGS}"
			;;
	esac
	std_opt "${opt}"
done

shift $((${OPTIND} - 1))
[ "$#" -eq 1 ] || usage 1
FILENAME=`xrealpath ${1}`

assert_rescue_mode

is_writable_chardev "${MTD_DEVICE}" || abort "Target device '${MTD_DEVICE}' is not a writable character device"
! is_empty "${FILENAME}" || abort "No tarball filename given"
is_readable_file "${FILENAME}" || abort "Cannot access '${FILENAME}'"

create_workspace

mount_cache

if ! is_chardev "${UBI_DEVICE}" && ! attach_ubi_device "${MTD_DEVICE}"; then
	erase "${MTD_DEVICE}" || abort "Failed to erase ${MTD_DEVICE}"
	format_ubi_device "${MTD_DEVICE}" || abort "Failed to format ${MTD_DEVICE}"
	attach_ubi_device "${MTD_DEVICE}" || abort "Failed to attach ${MTD_DEVICE} to UBI"
fi

[ ! -f "${RECOVERY_CACHE}/settings.tar.gz" ] || cp ${RECOVERY_CACHE}/settings.tar.gz ${SETTINGS}
if is_chardev "${ROOT_PARTITION}"; then
	${BACKUP_SETTINGS}
fi
[ "${RESTORE_SETTINGS}" = ":" -o -f "${SETTINGS}" ] || abort "Can't restore settings without prior backup!"

if is_chardev "${ROOT_PARTITION}"; then
	unmount "${ROOT_MOUNTPOINT}" || abort "Failed to unmount root filesystem"
	remove_ubi_volume || abort "Failed to remove UBI volume"
fi

create_ubi_volume || abort "Failed to create UBI volume"
udevadm settle
create_nand_filesystem "${ROOT_PARTITION}" || abort "Failed to create ${FILESYSTEM} filesystem on '${ROOT_PARTITION}'"
safe_mount "${ROOT_PARTITION}" "${ROOT_MOUNTPOINT}" || abort "Failed to mount root filesystem"
extract_tarball "${FILENAME}" "${ROOT_MOUNTPOINT}" || abort "Failed to extract root filesystem"
run_postinsts "${ROOT_MOUNTPOINT}" dreambox-secondstage kernel-image || abort "Failed to run postinst scripts"
${RESTORE_SETTINGS}
unmount "${ROOT_MOUNTPOINT}" || warn "Failed to unmount root filesystem"

[ "${BACKUP_SETTINGS}" = ":" ] || update_cache "${SETTINGS}"
unmount_cache

info "Finished successfully. You may reboot now."
